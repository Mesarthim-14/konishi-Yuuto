//=============================================================================
//
// シールド処理 [shield.cpp]
// Author : Konishi Yuuto
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "shield.h"
#include "renderer.h"
#include "manager.h"
#include "player.h"
#include "sound.h"

//=============================================================================
// static初期化
//=============================================================================
LPDIRECT3DTEXTURE9 CShield::m_apTexture[MAX_SHILD_TEXTURE] = {};

//=============================================================================
// インスタンス生成
//=============================================================================
CShield * CShield::Create(D3DXVECTOR3 pos, D3DXVECTOR3 move, D3DXVECTOR3 size, TYPE type, SHIELD_TYPE Stype)
{
	// インスタンス生成
	CShield *pShield = new CShield;

	if (pShield != NULL)
	{
		// 初期化処理
		pShield->Init(pos, size, type);
		pShield->SetMove(move);

		switch (Stype)
		{
		case SHIELD_TYPE_WHITE:
			// テクスチャ
			pShield->BindTexture(m_apTexture[0]);
			break;

		case SHIELD_TYPE_BLACK:
			// テクスチャ
			pShield->BindTexture(m_apTexture[1]);
			break;
		}
	}
	return pShield;
}

//=============================================================================
// テクスチャロード
//=============================================================================
HRESULT CShield::Load(void)
{
	// レンダラーの情報を受け取る
	CRenderer *pRenderer = NULL;
	pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "date/TEXTURE/バリア1.png",
		&m_apTexture[0]);
	D3DXCreateTextureFromFile(pDevice, "date/TEXTURE/赤バリア.png",
		&m_apTexture[1]);

	return S_OK;
}

//=============================================================================
// テクスチャアンロード
//=============================================================================
void CShield::UnLoad(void)
{
	for (int nCount = 0; nCount < MAX_SHILD_TEXTURE; nCount++)
	{
		// テクスチャの開放
		if (m_apTexture[nCount] != NULL)
		{
			m_apTexture[nCount]->Release();
			m_apTexture[nCount] = NULL;
		}
	}
}

//=============================================================================
// コンストラクタ
//=============================================================================
CShield::CShield()
{
	m_Pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_bScaleUp = false;
}

//=============================================================================
// デストラクタ
//=============================================================================
CShield::~CShield()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CShield::Init(D3DXVECTOR3 pos, D3DXVECTOR3 size, TYPE type)
{
	// 初期化処理
	CScene2D::Init(pos, size, type);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CShield::Uninit(void)
{
	// 2Dポリゴン終了処理
	CScene2D::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CShield::Update(void)
{
	// 2Dポリゴン更新処理
	CScene2D::Update();
}

//=============================================================================
// 描画処理
//=============================================================================
void CShield::Draw(void)
{
	// 2Dポリゴン描画処理
	CScene2D::Draw();
}

//=============================================
// 弾の設定
//=============================================
void CShield::SetMove(D3DXVECTOR3 move)
{
	// 変数に代入
	m_move = move;
}

//=============================================================================
// 拡大のフラグ
//=============================================================================
bool CShield::GetbScale(void)
{
	return m_bScaleUp;
}

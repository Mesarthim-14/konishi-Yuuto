//=============================================================================
//
// スコアクラス [score.cpp]
// Author : Konishi Yuuto
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "score.h"
#include "manager.h"
#include "renderer.h"
#include "number.h"

//=============================================================================
// マクロ定義
//=============================================================================
#define NUMBER_INTERVAL	(25.0f)			// 数字の間隔

//=============================================================================
// コンストラクタ
//=============================================================================
CScore::CScore()
{
	m_nScore = 0;
}

//=============================================================================
// デストラクタ
//=============================================================================
CScore::~CScore()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CScore::Init(D3DXVECTOR3 pos, D3DXVECTOR3 size, TYPE type)
{
	for (int nCount = 0; nCount < MAX_NUMBER; nCount++)
	{
		// 数字のメモリ確保
		m_apNumber[nCount] = CNumber::Create(pos, size, type, CNumber::NUMBER_TYPE_SCORE);

		if (m_apNumber[nCount] != NULL)
		{
			// 数字の間隔をあける
			pos.x -= NUMBER_INTERVAL;

			// 数字の設定
			m_apNumber[nCount]->SetNumber(0);
		}
	}
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CScore::Uninit(void)
{
	for (int nCount = 0; nCount < MAX_NUMBER; nCount++)
	{
		// ナンバー終了処理
		if (m_apNumber[nCount] != NULL)
		{
			m_apNumber[nCount]->Uninit();
		}
	}
	// メモリの開放処理
	Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CScore::Update(void)
{

}

//=============================================================================
// 描画処理
//=============================================================================
void CScore::Draw(void)
{
	for (int nCount = 0; nCount < MAX_NUMBER; nCount++)
	{
		if (m_apNumber[nCount] != NULL)
		{
			m_apNumber[nCount]->Draw();
		}
	}
}

//=============================================================================
// スコアの設定
//=============================================================================
void CScore::SetScore(int nScore)
{
	m_nScore += nScore;

	for (int nCount = 0; nCount < MAX_NUMBER; nCount++)
	{
		int nNum = (m_nScore / (int)(pow(10, nCount))) % 10;

		// 数字の設定
		m_apNumber[nCount]->SetNumber(nNum);
	}
}

//=============================================================================
// スコア情報
//=============================================================================
int CScore::GetScore(void)
{
	return m_nScore;
}
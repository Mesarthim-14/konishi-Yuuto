//=============================================================================
//
// UI処理 [ui.cpp]
// Author : Konishi Yuuto
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "ui.h"
#include "renderer.h"
#include "manager.h"
#include "sound.h"

//=============================================================================
// static初期化
//=============================================================================
LPDIRECT3DTEXTURE9 CUi::m_apTexture[MAX_UI_TEXTURE] = {};

//=============================================================================
// インスタンス生成
//=============================================================================
CUi * CUi::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size, TYPE type, UI_TYPE Utype)
{
	// インスタンス生成
	CUi *pUi = new CUi;

	if (pUi != NULL)
	{
		// 初期化処理
		pUi->Init(pos, size, type);

		switch (Utype)
		{
		case UI_TYPE_WALL:
			// テクスチャ
			pUi->BindTexture(m_apTexture[0]);
			break;

		case UI_TYPE_WAKU:
			// テクスチャ
			pUi->BindTexture(m_apTexture[1]);
			pUi->InitScroll(1, 0.04f);
			break;

		case UI_TYPE_REMAIN:
			// テクスチャ
			pUi->BindTexture(m_apTexture[2]);
			break;
		}
	}
	return pUi;
}

//=============================================================================
// テクスチャロード
//=============================================================================
HRESULT CUi::Load(void)
{
	// レンダラーの情報を受け取る
	CRenderer *pRenderer = NULL;
	pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "date/TEXTURE/wall000.jpg",
		&m_apTexture[0]);
	D3DXCreateTextureFromFile(pDevice, "date/TEXTURE/bg_waku.png",
		&m_apTexture[1]);
	D3DXCreateTextureFromFile(pDevice, "date/TEXTURE/remain000.png",
		&m_apTexture[2]);

	return S_OK;
}

//=============================================================================
// テクスチャアンロード
//=============================================================================
void CUi::UnLoad(void)
{
	for (int nCount = 0; nCount < MAX_UI_TEXTURE; nCount++)
	{
		// テクスチャの開放
		if (m_apTexture[nCount] != NULL)
		{
			m_apTexture[nCount]->Release();
			m_apTexture[nCount] = NULL;
		}
	}
}

//=============================================================================
// コンストラクタ
//=============================================================================
CUi::CUi()
{
	m_Pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_Utype = UI_TYPE_NONE;
}

//=============================================================================
// デストラクタ
//=============================================================================
CUi::~CUi()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CUi::Init(D3DXVECTOR3 pos, D3DXVECTOR3 size, TYPE type)
{
	// 初期化処理
	CScene2D::Init(pos, size, type);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CUi::Uninit(void)
{
	// 2Dポリゴン終了処理
	CScene2D::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CUi::Update(void)
{
	// 2Dポリゴン更新処理
	CScene2D::Update();
}

//=============================================================================
// 描画処理
//=============================================================================
void CUi::Draw(void)
{
	// 2Dポリゴン描画処理
	CScene2D::Draw();
}

//=============================================================================
// Uiのタイプを設定
//=============================================================================
void CUi::SetType(UI_TYPE Utype)
{
	m_Utype = Utype;
}